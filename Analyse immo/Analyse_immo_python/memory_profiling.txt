Filename: script.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    114.0 MiB    114.0 MiB           1   @profile
    13                                         def main():
    14    114.0 MiB      0.0 MiB           1       start_time = time.time()
    15                                         
    16                                             # Récupération des données depuis l'API
    17    114.0 MiB      0.0 MiB           1       url = "https://api.cquest.org/dvf?code_postal=92140&type_local=Maison"
    18    116.7 MiB      2.7 MiB           1       response = requests.get(url)
    19    119.9 MiB      3.3 MiB           1       data = response.json()
    20                                         
    21                                             # Chargement des données dans Pandas
    22    119.9 MiB      0.0 MiB           1       resultats = data['resultats']
    23    122.6 MiB      2.7 MiB           1       df = pd.json_normalize(resultats)
    24                                         
    25                                             # Ajout d'une colonne 'quartier' au DataFrame
    26    122.9 MiB      0.3 MiB           1       df['quartier'] = df['section'].map(section_to_quartier)
    27                                         
    28                                             # Ajout d'une colonne 'prix_m2' au DataFrame
    29                                             # Calcul du prix par mètre carré
    30    122.9 MiB      0.0 MiB           1       df['prix_m2'] = df['valeur_fonciere'] / df['surface_relle_bati']
    31                                         
    32                                             # Analyse des données
    33                                         
    34                                             # Calcul du prix moyen au mètre carré par quartier
    35    123.1 MiB      0.2 MiB           1       prix_moyen_m2_par_quartier = df.groupby('quartier')['prix_m2'].mean().reset_index()
    36    123.2 MiB      0.1 MiB           1       prix_moyen_m2_par_quartier = prix_moyen_m2_par_quartier.sort_values(by='prix_m2', ascending=False)
    37                                         
    38                                             # Calcul du nombre de ventes par quartier
    39    123.3 MiB      0.1 MiB           1       nombre_ventes_par_quartier = df['quartier'].value_counts().reset_index()
    40    123.3 MiB      0.0 MiB           1       nombre_ventes_par_quartier.columns = ['quartier', 'nombre_ventes']
    41                                         
    42                                             # Calcul de la surface moyenne des terrains par quartier
    43    123.3 MiB      0.0 MiB           1       surface_moyenne_par_quartier = df.groupby('quartier')['surface_terrain'].mean().reset_index()
    44    123.3 MiB      0.0 MiB           1       surface_moyenne_par_quartier = surface_moyenne_par_quartier.sort_values(by='surface_terrain', ascending=False)
    45                                         
    46                                             # Fusionner tous les résultats dans un seul DataFrame
    47    123.5 MiB      0.3 MiB           1       resultats_complets = pd.merge(prix_moyen_m2_par_quartier, nombre_ventes_par_quartier, on='quartier')
    48    123.5 MiB      0.0 MiB           1       resultats_complets = pd.merge(resultats_complets, surface_moyenne_par_quartier, on='quartier')
    49                                         
    50                                             # Renommer les colonnes pour plus de clarté
    51    123.5 MiB      0.0 MiB           1       resultats_complets.columns = ['quartier', 'prix_moyen_m2', 'nombre_ventes', 'surface_moyenne']
    52                                         
    53                                             # Sauvegarder les résultats dans un fichier CSV
    54    123.6 MiB      0.1 MiB           1       resultats_complets.to_csv('resultats_immobiliers.csv', index=False)
    55                                         
    56                                             # Visualisation des données
    57                                         
    58                                             # Prix moyen au m² par quartier
    59    140.5 MiB     16.9 MiB           1       plt.figure(figsize=(12,6))
    60    142.2 MiB      1.7 MiB           1       sns.barplot(x=prix_moyen_m2_par_quartier['quartier'], y=prix_moyen_m2_par_quartier['prix_m2'], palette="viridis")
    61    142.2 MiB      0.0 MiB           1       plt.title('Prix moyen au m² par quartier')
    62    142.2 MiB      0.0 MiB           1       plt.xlabel('Quartier')
    63    142.2 MiB      0.0 MiB           1       plt.ylabel('Prix moyen au m²')
    64    142.2 MiB      0.0 MiB           1       plt.xticks(rotation=45)
    65    145.4 MiB      3.2 MiB           1       plt.tight_layout()
    66    146.2 MiB      0.8 MiB           1       plt.savefig('prix_moyen_m2_par_quartier.png')  # Sauvegarder le graphique
    67    143.1 MiB     -3.1 MiB           1       plt.close()
    68                                         
    69                                             # Nombre de ventes par quartier
    70    149.2 MiB      6.1 MiB           1       plt.figure(figsize=(12,6))
    71    150.0 MiB      0.8 MiB           1       sns.barplot(x=nombre_ventes_par_quartier['quartier'], y=nombre_ventes_par_quartier['nombre_ventes'], palette="rocket")
    72    150.0 MiB      0.0 MiB           1       plt.title('Nombre de ventes par quartier')
    73    150.0 MiB      0.0 MiB           1       plt.xlabel('Quartier')
    74    150.0 MiB      0.0 MiB           1       plt.ylabel('Nombre de ventes')
    75    150.0 MiB      0.0 MiB           1       plt.xticks(rotation=45)
    76    152.8 MiB      2.8 MiB           1       plt.tight_layout()
    77    153.4 MiB      0.6 MiB           1       plt.savefig('nombre_ventes_par_quartier.png')  # Sauvegarder le graphique
    78    148.7 MiB     -4.7 MiB           1       plt.close()
    79                                         
    80                                             # Surface moyenne des terrains par quartier
    81    154.9 MiB      6.2 MiB           1       plt.figure(figsize=(12,6))
    82    155.6 MiB      0.8 MiB           1       sns.barplot(x=surface_moyenne_par_quartier['quartier'], y=surface_moyenne_par_quartier['surface_terrain'], palette="magma")
    83    155.6 MiB      0.0 MiB           1       plt.title('Surface moyenne des terrains par quartier')
    84    155.6 MiB      0.0 MiB           1       plt.xlabel('Quartier')
    85    155.6 MiB      0.0 MiB           1       plt.ylabel('Surface moyenne (m²)')
    86    155.6 MiB      0.0 MiB           1       plt.xticks(rotation=45)
    87    158.4 MiB      2.8 MiB           1       plt.tight_layout()
    88    159.0 MiB      0.5 MiB           1       plt.savefig('surface_moyenne_par_quartier.png')  # Sauvegarder le graphique
    89    154.1 MiB     -4.8 MiB           1       plt.close()
    90                                         
    91                                             # Sauvegarder tous les résultats dans un fichier Excel avec les graphiques
    92    154.2 MiB      0.0 MiB           1       wb = Workbook()
    93    154.2 MiB      0.0 MiB           1       ws = wb.active
    94    154.2 MiB      0.0 MiB           1       ws.title = "Données"
    95                                         
    96                                             # Sauvegarde du DataFrame dans une feuille Excel
    97    154.2 MiB      0.0 MiB           9       for r in dataframe_to_rows(resultats_complets, index=False, header=True):
    98    154.2 MiB      0.0 MiB           8           ws.append(r)
    99                                         
   100                                             # Ajout des images
   101    154.2 MiB      0.0 MiB           1       image_files = ['prix_moyen_m2_par_quartier.png', 'nombre_ventes_par_quartier.png', 'surface_moyenne_par_quartier.png']
   102    154.2 MiB      0.0 MiB           1       start_row = len(resultats_complets) + 4  # Ajuste la ligne de départ pour les images
   103                                         
   104    154.2 MiB      0.0 MiB           4       for image_file in image_files:
   105    154.2 MiB      0.0 MiB           3           img = Image(image_file)
   106    154.2 MiB      0.0 MiB           3           ws.add_image(img, f'A{start_row}')
   107    154.2 MiB      0.0 MiB           3           start_row += 25  # Ajuste l'espacement vertical entre les images, changez la valeur selon la taille des images
   108                                         
   109                                             # Sauvegarder le fichier Excel
   110    154.3 MiB      0.1 MiB           1       wb.save("resultats_immobiliers_complets.xlsx")
   111                                         
   112    154.3 MiB      0.0 MiB           1       end_time = time.time()
   113                                             
   114                                             # Mesure du temps d'exécution
   115    154.3 MiB      0.0 MiB           1       execution_time = end_time - start_time
   116                                         
   117                                             # Retour des informations de performance
   118    154.3 MiB      0.0 MiB           1       return execution_time


Les résultats de performance ont été stockés dans 'performance_resultats.xlsx'.
